// Code generated by MockGen. DO NOT EDIT.
// Source: internal/modules/customers/customer_service.go

// Package mock_customer is a generated GoMock package.
package mock_customer

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	customers "github.com/klintonlee/simple-bank-api/internal/modules/customers"
)

// MockCustomerStoreInterface is a mock of CustomerStoreInterface interface.
type MockCustomerStoreInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerStoreInterfaceMockRecorder
}

// MockCustomerStoreInterfaceMockRecorder is the mock recorder for MockCustomerStoreInterface.
type MockCustomerStoreInterfaceMockRecorder struct {
	mock *MockCustomerStoreInterface
}

// NewMockCustomerStoreInterface creates a new mock instance.
func NewMockCustomerStoreInterface(ctrl *gomock.Controller) *MockCustomerStoreInterface {
	mock := &MockCustomerStoreInterface{ctrl: ctrl}
	mock.recorder = &MockCustomerStoreInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerStoreInterface) EXPECT() *MockCustomerStoreInterfaceMockRecorder {
	return m.recorder
}

// FindByCpf mocks base method.
func (m *MockCustomerStoreInterface) FindByCpf(cpf string) (customers.CustomerInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCpf", cpf)
	ret0, _ := ret[0].(customers.CustomerInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCpf indicates an expected call of FindByCpf.
func (mr *MockCustomerStoreInterfaceMockRecorder) FindByCpf(cpf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCpf", reflect.TypeOf((*MockCustomerStoreInterface)(nil).FindByCpf), cpf)
}

// Save mocks base method.
func (m *MockCustomerStoreInterface) Save(customer customers.CustomerInterface) (customers.CustomerInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", customer)
	ret0, _ := ret[0].(customers.CustomerInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockCustomerStoreInterfaceMockRecorder) Save(customer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockCustomerStoreInterface)(nil).Save), customer)
}

// MockCustomerServiceInterface is a mock of CustomerServiceInterface interface.
type MockCustomerServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerServiceInterfaceMockRecorder
}

// MockCustomerServiceInterfaceMockRecorder is the mock recorder for MockCustomerServiceInterface.
type MockCustomerServiceInterfaceMockRecorder struct {
	mock *MockCustomerServiceInterface
}

// NewMockCustomerServiceInterface creates a new mock instance.
func NewMockCustomerServiceInterface(ctrl *gomock.Controller) *MockCustomerServiceInterface {
	mock := &MockCustomerServiceInterface{ctrl: ctrl}
	mock.recorder = &MockCustomerServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerServiceInterface) EXPECT() *MockCustomerServiceInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCustomerServiceInterface) Create(name, cpf, birth string) (customers.CustomerInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", name, cpf, birth)
	ret0, _ := ret[0].(customers.CustomerInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCustomerServiceInterfaceMockRecorder) Create(name, cpf, birth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCustomerServiceInterface)(nil).Create), name, cpf, birth)
}

// FindCustomerByCpf mocks base method.
func (m *MockCustomerServiceInterface) FindCustomerByCpf(id string) (customers.CustomerInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCustomerByCpf", id)
	ret0, _ := ret[0].(customers.CustomerInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCustomerByCpf indicates an expected call of FindCustomerByCpf.
func (mr *MockCustomerServiceInterfaceMockRecorder) FindCustomerByCpf(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCustomerByCpf", reflect.TypeOf((*MockCustomerServiceInterface)(nil).FindCustomerByCpf), id)
}
